// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique // for uniqueness and faster lookup
  hash  String // store hashed password

  name String

  Role   Role? @relation(fields: [roleId], references: [id])
  roleId Int?

  Post    Post[]
  Comment Comment[]
  Upvote  Upvote[]
}

model Role {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String       @unique // Roles must have unique names
  description String?
  permissions Permission[] @relation("RolePermissions")
  users       User[]
}

model Permission {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @unique // Permissions must have unique names
  description String?
  roles       Role[]  @relation("RolePermissions")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String
  content String
  topics  String[]

  Comments    Comment[]
  upvoteCount Int       @default(0) // Store upvote count as a denormalized field for quick access
  Upvotes     Upvote[]

  Author   User @relation(fields: [authorId], references: [id])
  authorId Int

  @@index([authorId])
  @@index([title, content])
}

// Seperate Upvote table for scaling
model Upvote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  Post   Post @relation(fields: [postId], references: [id])
  User   User @relation(fields: [userId], references: [id])
  postId Int  @unique // Ensure each user can upvote a post only once
  userId Int  @unique // Ensure each user can upvote a post only once

  @@index([postId, userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  message String

  User   User @relation(fields: [userId], references: [id])
  userId Int

  Post   Post @relation(fields: [postId], references: [id])
  postId Int

  @@index([postId])
  @@index([userId])
}
